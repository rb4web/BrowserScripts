// ==UserScript==
// @name        Filter FB Market Place
// @require     https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js
// @require     https://gist.github.com/raw/2625891/waitForKeyElements.js
// @require     https://cdn.jsdelivr.net/npm/@violentmonkey/dom@2
// @match       https://www.facebook.com/marketplace/*
// @version     1.0
// @author      Rakesh B
// @grant        GM_xmlhttpRequest
// @grant        GM_info
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        unsafeWindow
// @description 5/2/2023, 1:53:47 PM
// ==/UserScript==
/* globals jQuery, $, waitForKeyElements */
console.log("0_0 Filter FB Market Place script Started")
function getElementByXpath(path) {
  return document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

//https://violentmonkey.github.io/guide/observing-dom/
const disconnect = VM.observe(document.body, () => {
  console.log("0_0 Observer running.")
  waitForKeyElements("div[aria-label='Collection of Marketplace items']", actionFunction)
  actionFunction()

  // Find the target node
  const node = document.querySelector('.profile');
  let mpitems = getElementByXpath(
  "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div[2]/div/div/div[3]/div/div[2]");

  if (mpitems.length) {
    console.log("0_0 length changed")
    // disconnect observer
    return true;
  }
});

//waitForKeyElements("div[aria-label='Collection of Marketplace items']", actionFunction)
//actionFunction()
console.log("0_0 Filter FB Market Place script Ended")


function actionFunction () {
  console.log("0_1 actionfunction started")
let mpitems = getElementByXpath(
  "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[1]/div[1]/div[2]/div/div/div[3]/div/div[2]")
            let myloclist = new Set(['Melbourne, FL',
          'Rockledge, FL',
					'Satellite Beach, FL',
					'Indialantic, FL',
					'Merritt Island, FL',
					'Cocoa, FL',
          'Sebastian, FL',
         // 'Orlando, FL',
					'Palm Bay, FL'])
            for (mpitem of mpitems.children) {
            if ( mpitem.firstChild.firstChild == null) {
              console.log("null")
              continue
            }
              const ilocation = mpitem.firstChild.firstChild.firstChild.firstChild.firstChild.firstChild.firstChild.firstChild.firstChild.children[1].children[2].innerText
              if (!myloclist.has(ilocation)) {
                console.log("-"+ilocation)
                mpitem.style.display = 'none'
              }
            }
  console.log("0_1 actionfunction ended")
}


/*--- waitForKeyElements():  A utility function, for Greasemonkey scripts,
    that detects and handles AJAXed content.

    Usage example:

        waitForKeyElements (
            "div.comments"
            , commentCallbackFunction
        );

        //--- Page-specific function to do what we want when the node is found.
        function commentCallbackFunction (jNode) {
            jNode.text ("This comment changed by waitForKeyElements().");
        }

    IMPORTANT: This function requires your script to have loaded jQuery.
*/
function waitForKeyElements (
    selectorTxt,    /* Required: The jQuery selector string that
                        specifies the desired element(s).
                    */
    actionFunction, /* Required: The code to run when elements are
                        found. It is passed a jNode to the matched
                        element.
                    */
    bWaitOnce,      /* Optional: If false, will continue to scan for
                        new elements even after the first match is
                        found.
                    */
    iframeSelector  /* Optional: If set, identifies the iframe to
                        search.
                    */
) {
  console.log("0_0 WaitforKeyElements")
    var targetNodes, btargetsFound;

    if (typeof iframeSelector == "undefined")
        targetNodes     = $(selectorTxt);
    else
        targetNodes     = $(iframeSelector).contents ()
                                           .find (selectorTxt);

    if (targetNodes  &&  targetNodes.length > 0) {
        btargetsFound   = true;
        /*--- Found target node(s).  Go through each and act if they
            are new.
        */
        targetNodes.each ( function () {
            var jThis        = $(this);
            var alreadyFound = jThis.data ('alreadyFound')  ||  false;

            if (!alreadyFound) {
                //--- Call the payload function.
                var cancelFound     = actionFunction (jThis);
                if (cancelFound)
                    btargetsFound   = false;
                else
                    jThis.data ('alreadyFound', true);
            }
        } );
    }
    else {
        btargetsFound   = false;
    }

    //--- Get the timer-control variable for this selector.
    var controlObj      = waitForKeyElements.controlObj  ||  {};
    var controlKey      = selectorTxt.replace (/[^\w]/g, "_");
    var timeControl     = controlObj [controlKey];

    //--- Now set or clear the timer as appropriate.
    if (btargetsFound  &&  bWaitOnce  &&  timeControl) {
        //--- The only condition where we need to clear the timer.
        clearInterval (timeControl);
        delete controlObj [controlKey]
    }
    else {
        //--- Set a timer, if needed.
        if ( ! timeControl) {
            timeControl = setInterval ( function () {
                    waitForKeyElements (    selectorTxt,
                                            actionFunction,
                                            bWaitOnce,
                                            iframeSelector
                                        );
                },
                300
            );
            controlObj [controlKey] = timeControl;
        }
    }
    waitForKeyElements.controlObj   = controlObj;
}
